snippet googlemain "main function with glog & gflags"
#include <glog/logging.h>

int main(int argc, char* argv[]) {
  FLAGS_minloglevel = google::INFO;
  FLAGS_logtostderr = true;
  FLAGS_colorlogtostderr = true;

  google::InitGoogleLogging(argv[0]);
  google::ParseCommandLineFlags(&argc, &argv, true);

  std::string log_info_file = FLAGS_log_dir + "INFO_";
  std::string log_warning_file = FLAGS_log_dir + "WARNING_";
  std::string log_error_file = FLAGS_log_dir + "ERROR_";
  std::string log_fatal_file = FLAGS_log_dir + "FATAL_";
  
  google::SetLogDestination(google::GLOG_INFO, log_info_file.c_str());
  google::SetLogDestination(google::GLOG_WARNING, log_warning_file.c_str());
  google::SetLogDestination(google::GLOG_ERROR, log_error_file.c_str());
  google::SetLogDestination(google::GLOG_FATAL, log_fatal_file.c_str());
}
endsnippet

snippet class "new class with copy and move constructor deleted"
class ${1:MyClass} {
   public:
    $1();
    ~$1();

   public:
    // copy constructors
    $1(const $1& other) = delete;
    $1& operator=(const $1& other) = delete;
    // move constructors
    $1($1&& other) = delete;
    $1& operator=($1&& other) = delete;
};
endsnippet

snippet func_call "Display msg with function enter and exit"
#define FUNC_CALL() TracerT _token(__func__)
struct TracerT {
    char const* fname_;
    TracerT(char const* fname) : fname_(fname) {
        std::cout << "-- ***** " << fname_ << " ***** --" << std::endl;
    }
    ~TracerT() {
        std::cout << "== ***** " << fname_ << " ***** ==" << std::endl;
    }
};
endsnippet

snippet cv_window "add a opencv window and resize it"
  cv::namedWindow("display", cv::WINDOW_NORMAL | cv::WINDOW_KEEPRATIO);
  cv::resizeWindow("display", 1920, 1080);
endsnippet

snippet ffmpeg "ffmpeg image convert command"
fmpeg -s 1920x1536 -i 14_43.yuv -pix_fmt yuyv422 a.jpg
endsnippet

snippet mean "update mean and variance of data every iteration"
// reference: Kalman Filter https://www.kalmanfilter.net/alphabeta.html
//						https://www.quora.com/Is-it-possible-to-calculate-variance-using-old-variance-and-a-new-value
  double mean = 0;
  double variance = 0;
	for (size_t i = 0; i < data.size(); i++) {
	  int n_data = i + 1;
		mean += (1.0 / n_data) * (data[i] - mean);
		variance = (1.0 * n_data / (n_data + 1.0)) *
							(variance + (data[i] - mean) * (data[i] - mean) / (n_data + 1.0));
	}
endsnippet
