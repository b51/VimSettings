" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
" set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
" execute pathogen#infect()
" filetype plugin indent on
"endif

call plug#begin('~/.vim/bundle')
    Plug 'vim-scripts/Conque-Shell'
    Plug 'SirVer/ultisnips'
    Plug 'rking/ag.vim'
    Plug 'chriskempson/base16-vim'
    Plug 'mattn/calendar-vim'
    Plug 'junegunn/fzf.vim'
    Plug 'davidhalter/jedi-vim'
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
    Plug 'tomasr/molokai'
    Plug 'scrooloose/nerdtree'
    Plug 'ryanoasis/vim-devicons'
    Plug 'Xuyuanp/nerdtree-git-plugin'
    Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
    Plug 'danro/rename.vim'
    Plug 'vim-syntastic/syntastic'
    Plug 'godlygeek/tabular'
    Plug 'liuchengxu/vista.vim'
    Plug 'vim-scripts/taglist.vim'
    Plug 'mbbill/undotree'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'google/vim-codefmt'
    Plug 'tpope/vim-commentary'
    Plug 'octol/vim-cpp-enhanced-highlight'
    Plug 'dracula/vim', { 'as': 'dracula.vim' }
    Plug 'easymotion/vim-easymotion'
    Plug 'tpope/vim-fugitive'
    Plug 'ludovicchabant/vim-gutentags'
    Plug 'inkarkat/vim-ingo-library'
    Plug 'xuhdev/vim-latex-live-preview'
    Plug 'andrejlevkovitch/vim-lua-format'
    Plug 'google/vim-maktaba'
    Plug 'inkarkat/vim-mark'
    Plug 'samoshkin/vim-mergetool'
    Plug 'kshenoy/vim-signature'
    Plug 'tpope/vim-surround'
    Plug 'lervag/vimtex'
    Plug 'vimwiki/vimwiki'
    Plug 'sickill/vim-monokai'
    Plug 'rakr/vim-one'
    Plug 'luochen1990/rainbow'
    Plug 'kyoz/purify', { 'rtp': 'vim' }
    Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
    Plug 'Valloric/YouCompleteMe', { 'do': 'python3 install.py --clang-completer --system-libclang' }
    Plug 'skywind3000/vim-quickui'
    Plug 'skywind3000/asynctasks.vim'
    Plug 'skywind3000/asyncrun.vim'
    " Plug 'prabirshrestha/vim-lsp'
    " Plug 'mattn/vim-lsp-settings'
    " Plug 'prabirshrestha/asyncomplete.vim'
    " Plug 'prabirshrestha/asyncomplete-lsp.vim'
    " Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

"****************************************
        "New file title
"****************************************
autocmd BufNewFile *.py call SetPythonHeader()
autocmd BufNewFile *.hpp,*.cpp,,*.cc,*.[ch],*.sh,*.java call SetHeader()
let $author_name = "{set name in ~/.vimrc line 62}"
let $author_email = "{set mail in ~/.vimrc line 63}"
let $default_license = "{set license in ~/.vimrc line 64}"

function! SetHeader()
  "*.sh
  if &filetype == 'sh'
    call setline(1,"\#########################################################################")
    call append(line("."), "\#")
    call append(line(".")+1, "\#              Author: ".$author_name)
    call append(line(".")+2, "\#                Mail: ".$author_email)
    call append(line(".")+3, "\#            FileName: ".expand("%:t"))
    call append(line(".")+4, "\#")
    call append(line(".")+5, "\#          Created On: ".strftime("%c"))
    call append(line(".")+6, "\#")
    call append(line(".")+7, "\#########################################################################")
    call append(line(".")+8, "")
    call append(line(".")+9, "\#!/bin/bash")
    call append(line(".")+10, "")
  else
    call setline(1,"/*************************************************************************")
    call append(line("."), "\*")
    call append(line(".")+1, "\*              Author: ".$author_name)
    call append(line(".")+2, "\*                Mail: ".$author_email)
    call append(line(".")+3, "\*            FileName: ".expand("%:t"))
    call append(line(".")+4, "\*")
    call append(line(".")+5, "\*          Created On: ".strftime("%c"))
    call append(line(".")+6, "\*     Licensed under The ".$default_license." License [see LICENSE for details]")
    call append(line(".")+7, "\*")
    call append(line(".")+8, "************************************************************************/")
    call append(line(".")+9, "")
  endif
  "*.cpp
  if &filetype == 'cpp'
    call append(line(".")+10, "#include <iostream>")
    call append(line(".")+11, "")
  endif
  "*.cc
  if &filetype == 'cc'
    call append(line(".")+10, "#include <iostream>")
    call append(line(".")+11, "")
  endif
  "*.c
  if &filetype == 'c'
    call append(line(".")+10, "#include <stdio.h>")
    call append(line(".")+11, "")
  endif
  "Goto end of file
  "autocmd BufEnter * normal G
endfunc

function! SetPythonHeader()
  call setline(1,"\#!/usr/bin/env python")
  call append(line("."), "\#########################################################################")
  call append(line(".")+1, "\#")
  call append(line(".")+2, "\#              Author: ".$author_name)
  call append(line(".")+3, "\#                Mail: ".$author_email)
  call append(line(".")+4, "\#            FileName: ".expand("%:t"))
  call append(line(".")+5, "\#")
  call append(line(".")+6, "\#          Created On: ".strftime("%c"))
  call append(line(".")+7, "\#     Licensed under The ".$default_license." License [see LICENSE for details]")
  call append(line(".")+8, "\#")
  call append(line(".")+9, "\#########################################################################")
  call append(line(".")+10, "")
  "autocmd BufEnter * normal G
endfunc

"****************************************
        "taglist config
"****************************************
"if getfsize(".vimscript")>0
"    source .vimscript
"endif
"
"let Tlist_Exit_OnlyWindow=1
""let Tlist_Auto_Open=1
"let Tlist_File_Fold_Auto_Close=1
"let Tlist_Use_Right_Window=1
"nnoremap <silent> <F8> :TlistToggle<CR>

"****************************************
        "cscope config
"****************************************
function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  " else add the database pointed to by environment variable
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif
endfunction
au BufEnter /* call LoadCscope()

nmap <Leader>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <Leader>I :cs find i <C-R>=expand("<cfile>")<CR><CR>
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>
nnoremap <C-]> g<C-]>

"****************************************
        "NERDTREE config"
"****************************************
"autocmd vimenter * NERDTree
wincmd w
autocmd vimenter * wincmd w
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:NERDTreeGitStatusUseNerdFonts = 1

" Highlight current line
"au WinLeave * set nocursorline nocursorcolumn
"au WinEnter * set cursorline cursorcolumn
"set cursorline cursorcolumn
set cursorcolumn

"****************************************
        "powerline settings
"****************************************
"set guifont=PowerlineSymbols\ for\ Powerline
"set nocompatible
"set laststatus=2
"set t_Co=256
"let g:Powerline_symbols = 'fancy'
"let Powerline_symbols='compatible'

"****************************************
        "airline settings
"****************************************
" let g:airline_theme="hybridline"
let g:airline_theme="simple"
set laststatus=2
set t_Co=256
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#buffer_nr_show = 1
nnoremap <C-TAB> :bn<CR>
nnoremap <C-S-TAB> :bp<CR>
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols_branch = '⎇'

"****************************************
        "vim-fugitive config"
"****************************************
"set laststatus=2 " Always display the status line
"set statusline+=%{fugitive#statusline()} "  Git Hotness

"****************************************
        "tagbar settings
"****************************************
" let g:tagbar_width=35
" let g:tagbar_autofocus=1
" nmap <F8> :TagbarToggle<CR>

"****************************************
        "vista settings
"****************************************
function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction
set statusline+=%{NearestMethodOrFunction()}
autocmd VimEnter * call vista#RunForNearestMethodOrFunction()
" How each level is indented and what to prepend.
" This could make the display more compact or more spacious.
" e.g., more compact: ["▸ ", ""]
" Note: this option only works for the kind renderer, not the tree renderer.
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
" Executive used when opening vista sidebar without specifying it.
" See all the avaliable executives via `:echo g:vista#executives`.
let g:vista_default_executive = 'ctags'
" Set the executive for some filetypes explicitly. Use the explicit executive
" instead of the default one for these filetypes when using `:Vista` without
" specifying the executive.
let g:vista_executive_for = {
  \ 'cpp': 'ctags',
  \ 'php': 'vim_lsp',
  \ }

" Declare the command including the executable and options used to generate ctags output
" for some certain filetypes.The file path will be appened to your custom command.
" For example:
let g:vista_ctags_cmd = {
      \ 'haskell': 'hasktags -x -o - -c',
      \ }
" To enable fzf's preview window set g:vista_fzf_preview.
" The elements of g:vista_fzf_preview will be passed as arguments to fzf#vim#with_preview()
" For example:
let g:vista_fzf_preview = ['right:50%']
" Ensure you have installed some decent font to show these pretty symbols, then you can enable icon for the kind.
let g:vista#renderer#enable_icon = 1
" The default icons can't be suitable for all the filetypes, you can extend it as you wish.
let g:vista#renderer#icons = {
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }
nnoremap <silent> <F8> :Vista!!<CR>

"****************************************
        "LeaderF settings:
"****************************************
let g:Lf_ShortcutF = '<C-P>'
" let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_ReverseOrder = 1
let g:Lf_WorkingDirectoryMode = 'AF'
let g:Lf_RootMarkers = ['.git', '.svn', '.hg', '.project', '.root']

"****************************************
        "ag settings:
"****************************************
let g:ag_working_path_mode="r"
nmap <F2> :Ag! --noaffinity<space>

"****************************************
        "syntastic settings:
"****************************************
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 1
let g:syntastic_python_checkers = ['pyflakes']
"nmap<F10> :SyntasticToggleMode<CR>

"****************************************
        "markdown preview:
"****************************************
nmap <F9>o :MarkdownPreview<CR>
nmap <F9>q :MarkdownPreviewStop<CR>

function! SetupPython()
  setlocal softtabstop=4
  setlocal tabstop=4
  setlocal shiftwidth=4
endfunction
command! -bar SetupPython call SetupPython()

"****************************************
            "vimwiki"
"****************************************
let g:vimwiki_list = [{'path': '~/Documents/VimWiki/', 'syntax': 'markdown', 'ext': '.md'}]
au BufRead, BufNewFile *.wiki set filetype=vimwiki
function! ToggleCalendar()
  execute ":Calendar"
  if exists("g:calendar_open")
    if g:calendar_open == 1
      execute "q"
      unlet g:calendar_open
    else
      g:calendar_open = 1
    end
  else
    let g:calendar_open = 1
  end
endfunction
:autocmd FileType vimwiki map <Leader>c :call ToggleCalendar()<CR>
:nnoremap <F7> "=strftime("%Y-%m-%d")<CR>P
:inoremap <F7>t <C-R>=strftime("%Y-%m-%d")<CR>
":autocmd FileType vimwiki map c :Calendar<CR>

"****************************************
            "Calendar"
"****************************************
autocmd bufenter * if (winnr("$") == 1 && exists("b:Calendar")) | q | endif

"****************************************
            "vim-mark"
"****************************************
let g:mwDefaultHighlightingPalette = 'extended'

"****************************************
            "google vim codefmt"
"****************************************
"augroup autoformat_settings
"  autocmd FileType bzl AutoFormatBuffer buildifier
"  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
"  autocmd FileType dart AutoFormatBuffer dartfmt
"  autocmd FileType go AutoFormatBuffer gofmt
"  autocmd FileType gn AutoFormatBuffer gn
"  autocmd FileType html,css,json AutoFormatBuffer js-beautify
"  autocmd FileType java AutoFormatBuffer google-java-format
"  autocmd FileType python AutoFormatBuffer yapf
"  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
"augroup END

"****************************************
            "ultisnips"
"****************************************
let $snipath = $HOME."/.vim/ultisnips"
let g:UltiSnipsSnippetDirectories = [$snipath]
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-m>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"****************************************
            "YouCompleteMe"
"****************************************
let g:cm_server_python_interpreter='/usr/local/bin/python3'
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'
let g:ycm_enable_diagnostic_highlighting=0
let g:ycm_add_preview_to_completeopt=0
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_autoclose_preview_window_after_insertion = 1

"****************************************
            "normal"
"****************************************
set nu
set hlsearch
set noautoindent
set ruler
syntax enable
syntax on

"****************************************
               "fzf"
"****************************************
set rtp+=/usr/local/opt/fzf

"****************************************
           "gutentags"
"****************************************
" let g:gutentags_trace = 1
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
let g:gutentags_ctags_tagfile = 'tags'
let s:vim_tags = expand('~/.cache/ctags')
let g:gutentags_cache_dir = s:vim_tags
let g:gutentags_exclude_filetypes = ['gitcommit', 'gitconfig', 'gitrebase', 'gitsendemail', 'git', 'BCLOUD']
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extras=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
let g:gutentags_ctags_exclude = [
\  '*.git', '*.svn', '*.hg',
\  'cache', 'build', 'dist', 'bin', 'node_modules', 'bower_components',
\  '*-lock.json',  '*.lock',
\  '*.min.*',
\  '*.bak',
\  '*.zip',
\  '*.pyc',
\  '*.class',
\  '*.sln',
\  '*.csproj', '*.csproj.user',
\  '*.tmp',
\  '*.cache',
\  '*.vscode',
\  '*.pdb',
\  '*.exe', '*.dll', '*.bin',
\  '*.mp3', '*.ogg', '*.flac',
\  '*.swp', '*.swo',
\  '.DS_Store', '*.plist',
\  '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png', '*.svg',
\  '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
\  '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx', '*.xls',
\  '*.yml', '*.gcc_cmd', 'output',
\]

if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

"****************************************
            "colorscheme"
"****************************************
"------ dracula ------
" let g:dracula_colorterm = 0
" colorscheme dracula

"------ molokai ------
colorscheme molokai
let g:molokai_original = 1
" let g:rehash256 = 1

"------ purify ------
" colorscheme purify

"------ one ------
" let g:one_allow_italics = 1
" colorscheme one
" let g:airline_theme='one'

"------ molokai ------
" colorscheme monokai
" highlight Normal ctermbg=None
" set termguicolors

"****************************************
      "vim-latex-live-preview"
"****************************************
" let g:livepreview_previewer = 'evince'
let g:livepreview_previewer = 'zathura'
let g:livepreview_engine = 'xelatex'
:autocmd FileType vimwiki,tex setlocal updatetime=200
nmap <Leader>L :set syntax=tex<CR>
" :LLPStartPreview

"****************************************
      "vim-cpp-enhanced-highlight"
"****************************************

"****************************************
            "undotree"
"****************************************
nnoremap <F5> :UndotreeToggle<CR>

"****************************************
            "rainbow"
"****************************************
let g:rainbow_active = 1
augroup rainbow_off
    au!
    au FileType cmake RainbowToggleOff
augroup END

"****************************************
            "asyncomplete"
"****************************************
if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'allowlist': ['python'],
        \ })
endif

if executable('ccls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'allowlist': ['python'],
        \ })
endif

"****************************************
            "quickui"
"****************************************
let g:asynctasks_term_pos = 'tab'

let g:quickui_color_scheme = 'gruvbox'
let g:asyncrun_open = 6

call quickui#menu#reset()
call quickui#menu#install("&File", [
			\ [ "Leaderf &File", 'Leaderf file', 'Open file with leaderf'],
			\ [ "Leaderf &Recently", 'Leaderf mru --regexMode', 'Open recently accessed files'],
			\ [ "Leaderf &Buffer", 'Leaderf buffer', 'List current buffers in leaderf'],
			\ ])

call quickui#menu#install("&Build", [
			\ ["Project &Build", 'AsyncTask build'],
			\ ["Project &Run", 'AsyncTask run'],
			\ ])

call quickui#menu#install("&Git", [
			\ ['&View Diff', 'Gdiff'],
			\ ['&Show Log', 'Glog'],
			\ ['File &Add', 'Gw'],
			\ ])

call quickui#menu#install('&Tools', [
			\ ['List &Buffer', 'call quickui#tools#list_buffer("e")', ],
			\ ['List &Function', 'call quickui#tools#list_function()', ],
			\ ['Display &Messages', 'call quickui#tools#display_messages()', ],
			\ ])

call quickui#menu#install('&Plugin', [
			\ ["&NERDTree\t<space>tn", 'NERDTreeToggle', 'toggle nerdtree'],
			\ ['&Tagbar', 'Vista!!', 'toggle Vista'],
			\ ["-"],
			\ ["&Display Calendar", "Calendar", "display a calender"],
			\ ["-"],
			\ ["Plugin &Status", "PlugStatus", "Check plugins status"],
			\ ["Plugin &Update", "PlugUpdate", "Update plugin"],
			\ ])

call quickui#menu#install('Help (&?)', [
			\ ["&Index", 'tab help index', ''],
			\ ['Ti&ps', 'tab help tips', ''],
			\ ['--',''],
			\ ["&Tutorial", 'tab help tutor', ''],
			\ ['&Quick Reference', 'tab help quickref', ''],
			\ ['&Summary', 'tab help summary', ''],
			\ ['--',''],
			\ ['&Vim Script', 'tab help eval', ''],
			\ ['&Function List', 'tab help function-list', ''],
			\ ['&Dash Help', 'call asclib#utils#dash_ft(&ft, expand("<cword>"))'],
			\ ], 10000)
" let g:quickui_show_tip = 1

"----------------------------------------------------------------------
" context menu
"----------------------------------------------------------------------
let g:context_menu_k = [
			\ ["&Peek Definition\tAlt+;", 'call quickui#tools#preview_tag("")'],
			\ ["S&earch in Project\t\\cx", 'exec "silent! GrepCode! " . expand("<cword>")'],
			\ [ "--", ],
			\ [ "Find &Definition\t\\cg", 'call MenuHelp_Fscope("g")', 'GNU Global search g'],
			\ [ "Find &Symbol\t\\cs", 'call MenuHelp_Fscope("s")', 'GNU Gloal search s'],
			\ [ "Find &Called by\t\\cd", 'call MenuHelp_Fscope("d")', 'GNU Global search d'],
			\ [ "Find C&alling\t\\cc", 'call MenuHelp_Fscope("c")', 'GNU Global search c'],
			\ [ "Find &From Ctags\t\\cz", 'call MenuHelp_Fscope("z")', 'GNU Global search c'],
			\ [ "--", ],
			\ [ "Goto D&efinition\t(YCM)", 'YcmCompleter GoToDefinitionElseDeclaration'],
			\ [ "Goto &References\t(YCM)", 'YcmCompleter GoToReferences'],
			\ [ "Get D&oc\t(YCM)", 'YcmCompleter GetDoc'],
			\ [ "Get &Type\t(YCM)", 'YcmCompleter GetTypeImprecise'],
			\ [ "--", ],
			\ ['Dash &Help', 'call asclib#utils#dash_ft(&ft, expand("<cword>"))'],
			\ ['Cpp&man', 'exec "Cppman " . expand("<cword>")', '', 'c,cpp'],
			\ ['P&ython Doc', 'call quickui#tools#python_help("")', 'python'],
			\ ]

"----------------------------------------------------------------------
" hotkey
"----------------------------------------------------------------------
nnoremap <silent><leader><space> :call quickui#menu#open()<cr>
nnoremap <silent>K :call quickui#tools#clever_context('k', g:context_menu_k, {})<cr>
if has('gui_running') || has('nvim')
	noremap <c-f10> :call MenuHelp_TaskList()<cr>
endif

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store,*/vendor

set shiftwidth=4
set softtabstop=4
set tabstop=4
set cindent
set expandtab
set autochdir
set showcmd
set smartcase
set smartindent
set pastetoggle=<F12>
let g:indentLine_char = '︙'
set tags=./.tags;,.tags
set runtimepath^=~/.vim/bundle/ag.vim
set complete=.,w,b,u,t
set backspace=indent,eol,start
set history=1000
set t_ut=
set nofoldenable

set encoding=utf-8
